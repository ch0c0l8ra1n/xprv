// Generated by xprv-extract-type
// Source: src/demo/server.ts (variable xprvApp)
// Timestamp: 2025-10-24T11:05:17.095Z

import express from "express";
import z from "zod";
import { Request, Response } from "express";
import { ZodError } from "zod";

// From module core/types/json

type JsonPrimitive = string | number | boolean | null;

type JsonObject = {
        [key: string]: ValidJson;
    };

type JsonArray = ValidJson[];

type ValidJson = JsonPrimitive | JsonObject | JsonArray;

export type AssertValidJson<T> = T extends ValidJson ? T : T extends readonly (infer U)[] ? U extends ValidJson ? readonly AssertValidJson<U>[] : never : T extends object ? {
        [K in keyof T]: T[K] extends ValidJson ? AssertValidJson<T[K]> : never;
    } : never;

// From module core/json-response

export interface JsonOptions<TStatus extends number = number, TBody extends AssertValidJson<any> | undefined = undefined, THeaders = {}> {
        status: TStatus;
        body?: TBody;
        headers?: THeaders;
    }

export interface JsonResponse<TStatus extends number = number, TBody = undefined, THeaders = {}> {
        readonly status: TStatus;
        readonly body: TBody;
        readonly headers: THeaders;
    }

export function json<const TStatus extends number = number, const TBody = undefined, const THeaders = {}>(options: JsonOptions<TStatus, AssertValidJson<TBody>, THeaders>): JsonResponse<TStatus, TBody, THeaders>;

// From module core/types/input

export interface JsonRequest<THeaders, TParams, TQuery, TBody> {
        headers: THeaders;
        params: TParams;
        query: TQuery;
        body: TBody;
    }

export interface JsonSchemas<THeaders, TParams, TQuery, TBody> {
        headers: z.ZodSchema<THeaders, THeaders>;
        params: z.ZodSchema<TParams, TParams>;
        query: z.ZodSchema<TQuery, TQuery>;
        body: z.ZodSchema<TBody, TBody>;
    }

// From module core/json-route-handler

export interface JsonRouteHandlerOptions<TResponse extends JsonResponse<any, any, any>, TInput extends JsonRequest<any, any, any, any>, TContext = {}> {
        contextProvider: (request: Request, response: Response) => TContext;
        schemas: JsonSchemas<TInput['headers'], TInput['params'], TInput['query'], TInput['body']>;
        method: (input: TInput, context: TContext) => TResponse;
    }

export interface JsonRouteHandler<TResponse extends JsonResponse<any, any, any>, TInput extends JsonRequest<any, any, any, any>, TContext = {}> {
        contextProvider: (request: Request, response: Response) => TContext;
        schemas: JsonSchemas<TInput['headers'], TInput['params'], TInput['query'], TInput['body']>;
        method: (input: TInput, context: TContext) => TResponse;
    }

// From module core/types/http

export type HttpMethod = "get" | "post" | "put" | "delete" | "patch" | "options" | "head";

// From module core/json-route-node

export type JsonRouteHandlers = Partial<{
        [key in HttpMethod]: JsonRouteHandler<any, any, any>;
    }>;

export interface JsonRouteNode<TPath extends string, THandlers extends JsonRouteHandlers, TChildren extends JsonRouteNode<any, any, any>[]> {
        path: TPath;
        handlers: THandlers;
        children: TChildren;
    }

export interface JsonRouteNodeOptions<TPath extends string, THandlers extends JsonRouteHandlers, TChildren extends JsonRouteNode<any, any, any>[]> {
        path: TPath;
        handlers?: THandlers;
        children?: TChildren;
    }

export function node<TPath extends string, THandlers extends JsonRouteHandlers = {}, TChildren extends JsonRouteNode<any, any, any>[] = []>(options: JsonRouteNodeOptions<TPath, THandlers, TChildren>): JsonRouteNode<TPath, THandlers, TChildren>;

// From module core/xprv-default-error-handlers

const defaultOnInternalServerError: (error: unknown, req: Request, res: Response) => JsonResponse<500, {
        readonly error: "Internal Server Error";
    }, {}>;

const defaultOnNotFound: (req: Request, res: Response) => JsonResponse<404, {
        readonly error: "Not Found";
    }, {}>;

const defaultOnMethodNotAllowed: (req: Request, res: Response) => JsonResponse<405, {
        readonly error: "Method Not Allowed";
    }, {}>;

const defaultOnValidationError: (where: "headers" | "query" | "params" | "body", error: ZodError, req: Request, res: Response) => JsonResponse<400, {
        readonly error: "Validation Error";
        readonly details: {
            path: string;
            message: string;
        }[];
    }, {}>;

export { defaultOnInternalServerError, defaultOnNotFound, defaultOnMethodNotAllowed, defaultOnValidationError };

// From module core/types/error-handlers

export type InternalServerErrorHandler<TResponse extends JsonResponse<any, any, any>> = (error: unknown, req: express.Request, res: express.Response) => TResponse;

export type NotFoundHandler<TResponse extends JsonResponse<any, any, any>> = (req: express.Request, res: express.Response) => TResponse;

export type MethodNotAllowedHandler<TResponse extends JsonResponse<any, any, any>> = (req: express.Request, res: express.Response) => TResponse;

export type ValidationErrorHandler<TResponse extends JsonResponse<any, any, any>> = (where: "headers" | "query" | "params" | "body", error: ZodError, req: express.Request, res: express.Response) => TResponse;

export type ErrorHandlers<TInternal extends JsonResponse<any, any, any> = JsonResponse<any, any, any>, TNotFound extends JsonResponse<any, any, any> = JsonResponse<any, any, any>, TMethodNotAllowed extends JsonResponse<any, any, any> = JsonResponse<any, any, any>, TValidationError extends JsonResponse<any, any, any> = JsonResponse<any, any, any>> = {
        onInternalServerError: InternalServerErrorHandler<TInternal>;
        onNotFound: NotFoundHandler<TNotFound>;
        onMethodNotAllowed: MethodNotAllowedHandler<TMethodNotAllowed>;
        onValidationError: ValidationErrorHandler<TValidationError>;
    };

// From module core/xprv-app

export interface XPRVAppOptions<TRootNode extends JsonRouteNode<any, any, any> = JsonRouteNode<any, any, any>, TInternal extends JsonResponse<any, any, any> = ReturnType<typeof defaultOnInternalServerError>, TNotFound extends JsonResponse<any, any, any> = ReturnType<typeof defaultOnNotFound>, TMethodNotAllowed extends JsonResponse<any, any, any> = ReturnType<typeof defaultOnMethodNotAllowed>, TValidationError extends JsonResponse<any, any, any> = ReturnType<typeof defaultOnValidationError>> {
        rootNode: TRootNode;
        errorHandlers?: Partial<ErrorHandlers<TInternal, TNotFound, TMethodNotAllowed, TValidationError>>;
    }

export class XPRVApp<TRootNode extends JsonRouteNode<any, any, any> = JsonRouteNode<any, any, any>, TInternal extends JsonResponse<any, any, any> = ReturnType<typeof defaultOnInternalServerError>, TNotFound extends JsonResponse<any, any, any> = ReturnType<typeof defaultOnNotFound>, TMethodNotAllowed extends JsonResponse<any, any, any> = ReturnType<typeof defaultOnMethodNotAllowed>, TValidationError extends JsonResponse<any, any, any> = ReturnType<typeof defaultOnValidationError>> {
        rootNode: TRootNode;
        errorHandlers: ErrorHandlers<TInternal, TNotFound, TMethodNotAllowed, TValidationError>;
        constructor(options: XPRVAppOptions<TRootNode, TInternal, TNotFound, TMethodNotAllowed, TValidationError>);
        buildRouter(): import("express-serve-static-core").Router;
    }

export function app<TRootNode extends JsonRouteNode<any, any, any> = JsonRouteNode<any, any, any>, TInternal extends JsonResponse<any, any, any> = ReturnType<typeof defaultOnInternalServerError>, TNotFound extends JsonResponse<any, any, any> = ReturnType<typeof defaultOnNotFound>, TMethodNotAllowed extends JsonResponse<any, any, any> = ReturnType<typeof defaultOnMethodNotAllowed>, TValidationError extends JsonResponse<any, any, any> = ReturnType<typeof defaultOnValidationError>>(options: XPRVAppOptions<TRootNode, TInternal, TNotFound, TMethodNotAllowed, TValidationError>): XPRVApp<TRootNode, TInternal, TNotFound, TMethodNotAllowed, TValidationError>;

// From module demo/server

export const xprvApp: XPRVApp<JsonRouteNode<"/", {}, JsonRouteNode<"/utils", {}, (JsonRouteNode<"/ping", {
        get: JsonRouteHandler<JsonResponse<200, {
            readonly message: "pong!";
        }, {
            readonly "X-Custom": "value";
        }>, JsonRequest<unknown, unknown, unknown, unknown>, {}>;
    }, []> | JsonRouteNode<"/calculator", {
        post: JsonRouteHandler<JsonResponse<400, {
            readonly error: "Division by zero";
        }, {}> | JsonResponse<200, {
            readonly result: number;
        }, {}>, JsonRequest<unknown, unknown, unknown, {
            a: number;
            b: number;
            operation: "add" | "subtract" | "multiply" | "divide";
        }>, {}>;
    }, []>)[]>[]>, JsonResponse<500, {
        readonly message: "Internal server error";
    }, {}>, JsonResponse<404, {
        readonly error: "Not Found";
    }, {}>, JsonResponse<405, {
        readonly error: "Method Not Allowed";
    }, {}>, JsonResponse<400, {
        readonly error: "Validation Error";
        readonly details: {
            path: string;
            message: string;
        }[];
    }, {}>>;

export type xprvAppType = typeof xprvApp;
